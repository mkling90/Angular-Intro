Getting started
1. Create application folder
2. Add package definition and config files
3. Install packages
4. Create app's Angula Module
5. Create main.ts file
6. Create host Web page page (index.html)
OR
 (github.com/angular/quickstart) -> to get started quickly
 OR
 angular CLI to generate setup files (recommended)

Commands
npm -install  (install all the dependencies in the package.json file)

What is a Component?
Component = Template + Class + Metadata
Component Lifecycle : 
Create -> Render -> Create/Render children -> process changes -> Destroy
Nested components can be used as either a directive, or as a routing target
Pass data to Nested using @Input
Raise event using @Output

What is a Module?
Instead of just one large AppModule, you can organize the app with smaller modules (class with @ngModule)
Create Feature Modules, Shared Module - partition application into logical groupings
Every component, etc.. belongs to a module, can register services, export functionality,
Export any component if nother components need it.  Can re-export modules to re-export thier shared
never export a service - they get shared automatically when registered as injectable with parent component
Importing a module makes any exported components available.  Imports are not inherited
When using providers, a service provider added is registered at the root, so is availabel everywhere
Service should not be added to the providers array of shared module - build a core module for services, and import it once to appmodule

Twitter Bootstrap styling framework:
http://getbootstrap.com

Filtering:  
Recommended to be done within the component itself (not a custom pipe)

Building a Service:
Create a service Class, register as a provider in the component or module, then inject in constructor

Routing:
- no selector needed
- Configure routes (Define base element, add routermodule, add each route to routemodule)
- Tie routes to actions (Add routerLink directive as attrribute in a template, bind to a link parameters array)
- Place the view (specifify is host components view)
- Guards can test CanActivate, CanDeactivate, Resolve, and CanLoad